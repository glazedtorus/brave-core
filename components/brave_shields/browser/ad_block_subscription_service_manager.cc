/* Copyright (c) 2021 The Brave Authors. All rights reserved.
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "brave/components/brave_shields/browser/ad_block_subscription_service_manager.h"

#include <memory>
#include <utility>
#include <vector>

#include "base/base64url.h"
#include "base/bind.h"
#include "base/files/file_util.h"
#include "base/json/json_value_converter.h"
#include "base/strings/string_util.h"
#include "base/task/post_task.h"
#include "base/task/thread_pool.h"
#include "base/time/time.h"
#include "base/util/values/values_util.h"
#include "base/values.h"
#include "brave/components/adblock_rust_ffi/src/wrapper.h"
#include "brave/components/brave_shields/browser/ad_block_service_helper.h"
#include "brave/components/brave_shields/browser/ad_block_subscription_service.h"
#include "brave/components/brave_shields/browser/ad_block_subscription_service_manager_observer.h"
#include "brave/components/brave_shields/common/brave_shield_constants.h"
#include "brave/components/brave_shields/common/pref_names.h"
#include "components/prefs/pref_service.h"
#include "components/prefs/scoped_user_pref_update.h"
#include "content/public/browser/browser_task_traits.h"
#include "crypto/sha2.h"
#include "net/base/filename_util.h"

namespace brave_shields {

namespace {

FilterListSubscriptionInfo BuildInfoFromDict(
    const SubscriptionIdentifier& list_url,
    const base::Value* dict,
    const base::FilePath& list_dir) {
  DCHECK(dict);
  DCHECK(dict->is_dict());

  FilterListSubscriptionInfo info;
  base::JSONValueConverter<FilterListSubscriptionInfo> converter;
  converter.Convert(*dict, &info);

  info.list_url = list_url;
  info.list_dir = list_dir;

  return info;
}

const base::FilePath::CharType kSubscriptionsDir[] =
    FILE_PATH_LITERAL("FilterListSubscriptionCache");

}  // namespace

AdBlockSubscriptionServiceManager::AdBlockSubscriptionServiceManager(
    brave_component_updater::BraveComponent::Delegate* delegate,
    AdBlockSubscriptionDownloadManager::DownloadManagerGetter
        download_manager_getter,
    const base::FilePath& user_data_dir)
    : delegate_(delegate),
      subscription_path_(user_data_dir.AppendASCII(kSubscriptionsDir)),
      subscriptions_(new base::DictionaryValue()) {
  LoadSubscriptionServices();
  std::move(download_manager_getter)
      .Run(base::BindOnce(
          &AdBlockSubscriptionServiceManager::OnGetDownloadManager,
          weak_ptr_factory_.GetWeakPtr()));
}

AdBlockSubscriptionServiceManager::~AdBlockSubscriptionServiceManager() {}

base::FilePath AdBlockSubscriptionServiceManager::GetSubscriptionPath(
    const GURL& id) const {
  // Subdirectories are generated by taking the SHA256 hash of the list URL
  // spec, then base64 encoding that hash. This generates paths that are:
  //     - deterministic
  //     - unique
  //     - constant length
  //     - path-safe
  //     - not too long (exactly 45 characters)
  const std::string hash = crypto::SHA256HashString(id.spec());

  std::string pathsafe_id;
  base::Base64UrlEncode(hash, base::Base64UrlEncodePolicy::INCLUDE_PADDING,
                        &pathsafe_id);

  return subscription_path_.AppendASCII(pathsafe_id);
}

GURL AdBlockSubscriptionServiceManager::GetListTextFileUrl(
    const GURL id) const {
  base::FilePath cached_list_path = GetSubscriptionPath(id).AppendASCII(
      brave_shields::kCustomSubscriptionListText);

  const GURL file_url = net::FilePathToFileURL(cached_list_path);

  return file_url;
}

void AdBlockSubscriptionServiceManager::CreateSubscription(
    const GURL& list_url) {
  DCHECK_CALLED_ON_VALID_THREAD(thread_checker_);
  FilterListSubscriptionInfo info;
  info.list_url = list_url;
  info.list_dir = GetSubscriptionPath(list_url);
  info.last_update_attempt = base::Time();
  info.last_successful_update_attempt = base::Time();
  info.enabled = true;

  auto subscription_service = std::make_unique<AdBlockSubscriptionService>(
      info,
      base::BindRepeating(&AdBlockSubscriptionServiceManager::OnListLoaded,
                          weak_ptr_factory_.GetWeakPtr()),
      delegate_);
  UpdateFilterListPrefs(list_url, info);

  {
    base::AutoLock lock(subscription_services_lock_);
    // this could allow more than one service for a given url
    subscription_services_.insert(
        std::make_pair(list_url, std::move(subscription_service)));
  }

  ready_.Post(FROM_HERE,
               base::BindOnce(&AdBlockSubscriptionDownloadManager::StartDownload,
                              download_manager_, list_url, true));
}

std::vector<FilterListSubscriptionInfo>
AdBlockSubscriptionServiceManager::GetSubscriptions() {
  DCHECK_CALLED_ON_VALID_THREAD(thread_checker_);
  auto infos = std::vector<FilterListSubscriptionInfo>();

  for (const auto& subscription_service : subscription_services_) {
    auto info = GetInfo(subscription_service.first);
    DCHECK(info);
    infos.push_back(*info);
  }

  return infos;
}

void AdBlockSubscriptionServiceManager::EnableSubscription(
    const SubscriptionIdentifier& id,
    bool enabled) {
  DCHECK_CALLED_ON_VALID_THREAD(thread_checker_);
  auto info = GetInfo(id);
  DCHECK(info);

  info->enabled = enabled;

  UpdateFilterListPrefs(id, *info);
}

void AdBlockSubscriptionServiceManager::DeleteSubscription(
    const SubscriptionIdentifier& id) {
  DCHECK_CALLED_ON_VALID_THREAD(thread_checker_);
  {
    base::AutoLock lock(subscription_services_lock_);
    auto it = subscription_services_.find(id);
    DCHECK(it != subscription_services_.end());
    subscription_services_.erase(it);
  }
  ClearFilterListPrefs(id);

  base::ThreadPool::PostTask(
      FROM_HERE,
      {base::MayBlock(), base::TaskPriority::BEST_EFFORT,
       base::TaskShutdownBehavior::BLOCK_SHUTDOWN},
      base::BindOnce(base::IgnoreResult(&base::DeletePathRecursively),
                     GetSubscriptionPath(id)));
}

void AdBlockSubscriptionServiceManager::RefreshSubscription(
    const SubscriptionIdentifier& id,
    bool from_ui) {
  DCHECK_CALLED_ON_VALID_THREAD(thread_checker_);
  auto it = subscription_services_.find(id);
  DCHECK(it != subscription_services_.end());

  auto info = GetInfo(id);
  if (!info)
    return;  // TODO(bridiver) inform of error

  ready_.Post(
      FROM_HERE,
      base::BindOnce(&AdBlockSubscriptionDownloadManager::StartDownload,
                     download_manager_, info->list_url, from_ui));
}

void AdBlockSubscriptionServiceManager::OnGetDownloadManager(
    AdBlockSubscriptionDownloadManager* download_manager) {
  DCHECK_CALLED_ON_VALID_THREAD(thread_checker_);
  download_manager_ = download_manager->AsWeakPtr();
  // base::Unretained is ok here because AdBlockSubscriptionServiceManager will
  // outlive AdBlockSubscriptionDownloadManager
  download_manager_->set_subscription_path_callback(base::BindRepeating(
      &AdBlockSubscriptionServiceManager::GetSubscriptionPath,
      base::Unretained(this)));
  download_manager_->set_on_download_succeeded_callback(
      base::BindRepeating(&AdBlockSubscriptionServiceManager::OnListDownloaded,
                          base::Unretained(this)));
  download_manager_->set_on_download_failed_callback(base::BindRepeating(
      &AdBlockSubscriptionServiceManager::OnListDownloadFailure,
      base::Unretained(this)));
  ready_.Signal();
}

base::Optional<FilterListSubscriptionInfo>
AdBlockSubscriptionServiceManager::GetInfo(const SubscriptionIdentifier& id) {
  auto* list_subscription_dict = subscriptions_->FindKey(id.spec());
  if (!list_subscription_dict)
    return base::nullopt;

  return base::make_optional<FilterListSubscriptionInfo>(
      BuildInfoFromDict(id, list_subscription_dict, GetSubscriptionPath(id)));
}

void AdBlockSubscriptionServiceManager::LoadSubscriptionServices() {
  DCHECK_CALLED_ON_VALID_THREAD(thread_checker_);

  PrefService* local_state = delegate_->local_state();
  if (!local_state)
    return;

  base::AutoLock lock(subscription_services_lock_);
  subscriptions_ = base::DictionaryValue::From(base::Value::ToUniquePtrValue(
      local_state->GetDictionary(prefs::kAdBlockListSubscriptions)->Clone()));

  for (base::DictionaryValue::Iterator it(*subscriptions_); !it.IsAtEnd();
       it.Advance()) {
    const std::string key = it.key();
    FilterListSubscriptionInfo info;
    const base::Value* list_subscription_dict = subscriptions_->FindDictKey(key);
    if (list_subscription_dict) {
      SubscriptionIdentifier list_url(key);
      info = BuildInfoFromDict(list_url, list_subscription_dict,
                               GetSubscriptionPath(list_url));

      auto subscription_service = std::make_unique<AdBlockSubscriptionService>(
          info,
          base::BindRepeating(&AdBlockSubscriptionServiceManager::OnListLoaded,
                              weak_ptr_factory_.GetWeakPtr()),
          delegate_);

      subscription_services_.insert(
          std::make_pair(list_url, std::move(subscription_service)));
    }
  }
}

// Updates preferences to reflect a new state for the specified filter list.
// Creates the entry if it does not yet exist.
void AdBlockSubscriptionServiceManager::UpdateFilterListPrefs(
    const SubscriptionIdentifier& id,
    const FilterListSubscriptionInfo& info) {
  DCHECK_CALLED_ON_VALID_THREAD(thread_checker_);
  PrefService* local_state = delegate_->local_state();
  if (!local_state)
    return;

  DictionaryPrefUpdate update(local_state, prefs::kAdBlockListSubscriptions);
  base::DictionaryValue* subscriptions_dict = update.Get();
  auto subscription_dict = base::Value(base::Value::Type::DICTIONARY);
  subscription_dict.SetBoolKey("enabled", info.enabled);
  subscription_dict.SetKey("last_update_attempt",
                           util::TimeToValue(info.last_update_attempt));
  subscription_dict.SetKey("last_update_attempt",
                           util::TimeToValue(info.last_update_attempt));
  subscriptions_dict->SetKey(id.spec(), std::move(subscription_dict));

  // TODO(bridiver) - change to pref registrar
  base::AutoLock lock(subscription_services_lock_);
  subscriptions_ = base::DictionaryValue::From(
      base::Value::ToUniquePtrValue(subscriptions_dict->Clone()));
}

// Updates preferences to remove all state for the specified filter list.
void AdBlockSubscriptionServiceManager::ClearFilterListPrefs(
    const SubscriptionIdentifier& id) {
  DCHECK_CALLED_ON_VALID_THREAD(thread_checker_);
  PrefService* local_state = delegate_->local_state();
  if (!local_state)
    return;

  DictionaryPrefUpdate update(local_state, prefs::kAdBlockListSubscriptions);
  base::DictionaryValue* subscriptions_dict = update.Get();
  subscriptions_dict->RemoveKey(id.spec());

  // TODO(bridiver) - change to pref registrar
  base::AutoLock lock(subscription_services_lock_);
  subscriptions_ = base::DictionaryValue::From(
      base::Value::ToUniquePtrValue(subscriptions_dict->Clone()));
}

bool AdBlockSubscriptionServiceManager::Start() {
  DCHECK_CALLED_ON_VALID_THREAD(thread_checker_);
  for (const auto& subscription_service : subscription_services_) {
    subscription_service.second->Start();
  }
  return true;
}

void AdBlockSubscriptionServiceManager::ShouldStartRequest(
    const GURL& url,
    blink::mojom::ResourceType resource_type,
    const std::string& tab_host,
    bool* did_match_rule,
    bool* did_match_exception,
    bool* did_match_important,
    std::string* mock_data_url) {
  base::AutoLock lock(subscription_services_lock_);
  for (const auto& subscription_service : subscription_services_) {
    auto info = GetInfo(url);
    if (info && info->enabled) {
      subscription_service.second->ShouldStartRequest(
          url, resource_type, tab_host, did_match_rule, did_match_exception,
          did_match_important, mock_data_url);
      if (did_match_important && *did_match_important) {
        return;
      }
    }
  }
}

void AdBlockSubscriptionServiceManager::EnableTag(const std::string& tag,
                                                  bool enabled) {
  DCHECK_CALLED_ON_VALID_THREAD(thread_checker_);
  for (const auto& subscription_service : subscription_services_) {
    subscription_service.second->EnableTag(tag, enabled);
  }
}

void AdBlockSubscriptionServiceManager::AddResources(
    const std::string& resources) {
  DCHECK_CALLED_ON_VALID_THREAD(thread_checker_);
  for (const auto& subscription_service : subscription_services_) {
    subscription_service.second->AddResources(resources);
  }
}

base::Optional<base::Value>
AdBlockSubscriptionServiceManager::UrlCosmeticResources(
    const std::string& url) {
  base::Optional<base::Value> first_value = base::nullopt;

  base::AutoLock lock(subscription_services_lock_);
  for (auto it = subscription_services_.begin();
       it != subscription_services_.end(); it++) {
    auto info = GetInfo(it->first);
    if (info && info->enabled) {
      base::Optional<base::Value> next_value =
          it->second->UrlCosmeticResources(url);
      if (first_value) {
        if (next_value) {
          MergeResourcesInto(std::move(*next_value), &*first_value, false);
        }
      } else {
        first_value = std::move(next_value);
      }
    }
  }

  return first_value;
}

base::Optional<base::Value>
AdBlockSubscriptionServiceManager::HiddenClassIdSelectors(
    const std::vector<std::string>& classes,
    const std::vector<std::string>& ids,
    const std::vector<std::string>& exceptions) {
  base::Optional<base::Value> first_value = base::nullopt;

  base::AutoLock lock(subscription_services_lock_);
  for (auto it = subscription_services_.begin();
       it != subscription_services_.end(); it++) {
    auto info = GetInfo(it->first);
    if (info && info->enabled) {
      base::Optional<base::Value> next_value =
          it->second->HiddenClassIdSelectors(classes, ids, exceptions);
      if (first_value && first_value->is_list()) {
        if (next_value && next_value->is_list()) {
          for (auto i = next_value->GetList().begin();
               i < next_value->GetList().end(); i++) {
            first_value->Append(std::move(*i));
          }
        }
      } else {
        first_value = std::move(next_value);
      }
    }
  }

  return first_value;
}

void AdBlockSubscriptionServiceManager::OnListDownloaded(
    const SubscriptionIdentifier& id) {
  DCHECK_CALLED_ON_VALID_THREAD(thread_checker_);
  auto it = subscription_services_.find(id);
  if (it == subscription_services_.end())
    return;

  it->second->OnSuccessfulDownload();
}

void AdBlockSubscriptionServiceManager::OnListLoaded(
    const SubscriptionIdentifier& id) {
  DCHECK_CALLED_ON_VALID_THREAD(thread_checker_);
  auto it = subscription_services_.find(id);
  if (it == subscription_services_.end())
    return;

  auto info = GetInfo(id);
  if (!info)
    return;

  info->last_update_attempt = base::Time::Now();
  info->last_successful_update_attempt = base::Time::Now();
  UpdateFilterListPrefs(id, *info);

  // calling this more than once is ok
  it->second->Start();

  NotifyObserversOfServiceEvent();
}

void AdBlockSubscriptionServiceManager::OnListDownloadFailure(
    const SubscriptionIdentifier& id) {
  auto info = GetInfo(id);
  if (!info)
    return;

  info->last_update_attempt = base::Time::Now();
  UpdateFilterListPrefs(id, *info);
}

void AdBlockSubscriptionServiceManager::NotifyObserversOfServiceEvent() {
  for (auto& observer : observers_) {
    observer.OnServiceUpdateEvent();
  }
}

void AdBlockSubscriptionServiceManager::AddObserver(
    AdBlockSubscriptionServiceManagerObserver* observer) {
  observers_.AddObserver(observer);
}

void AdBlockSubscriptionServiceManager::RemoveObserver(
    AdBlockSubscriptionServiceManagerObserver* observer) {
  observers_.RemoveObserver(observer);
}

}  // namespace brave_shields
