/* Copyright (c) 2021 The Brave Authors. All rights reserved.
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "brave/components/brave_shields/browser/ad_block_subscription_service_manager.h"

#include <memory>
#include <utility>
#include <vector>

#include "base/base64url.h"
#include "base/files/file_util.h"
#include "base/json/json_value_converter.h"
#include "base/strings/string_util.h"
#include "base/task/post_task.h"
#include "base/time/time.h"
#include "base/util/values/values_util.h"
#include "base/values.h"
#include "brave/components/adblock_rust_ffi/src/wrapper.h"
#include "brave/components/brave_shields/browser/ad_block_service_helper.h"
#include "brave/components/brave_shields/browser/ad_block_subscription_service.h"
#include "brave/components/brave_shields/browser/ad_block_subscription_service_manager_observer.h"
#include "brave/components/brave_shields/common/pref_names.h"
#include "components/prefs/pref_service.h"
#include "components/prefs/scoped_user_pref_update.h"
#include "content/public/browser/browser_task_traits.h"
#include "crypto/sha2.h"

namespace brave_shields {

namespace {

FilterListSubscriptionInfo BuildInfoFromDict(
    const SubscriptionIdentifier& list_url,
    const base::Value* dict) {
  DCHECK(dict);
  DCHECK(dict->is_dict());

  FilterListSubscriptionInfo info;
  base::JSONValueConverter<FilterListSubscriptionInfo> converter;
  converter.Convert(*dict, &info);

  info.list_url = list_url;

  return info;
}

const base::FilePath::CharType kSubscriptionsDir[] =
    FILE_PATH_LITERAL("FilterListSubscriptionCache");

}  // namespace

AdBlockSubscriptionServiceManager::AdBlockSubscriptionServiceManager(
    brave_component_updater::BraveComponent::Delegate* delegate,
    AdBlockSubscriptionDownloadManager::DownloadManagerGetter
        download_manager_getter,
    const base::FilePath& user_data_dir)
    : delegate_(delegate),
      subscription_path_(user_data_dir.AppendASCII(kSubscriptionsDir)) {
  LoadSubscriptionServices();
  std::move(download_manager_getter)
      .Run(base::BindOnce(
          &AdBlockSubscriptionServiceManager::OnGetDownloadManager,
          weak_ptr_factory_.GetWeakPtr()));
}

AdBlockSubscriptionServiceManager::~AdBlockSubscriptionServiceManager() {}

base::FilePath AdBlockSubscriptionServiceManager::GetSubscriptionPath(
    const SubscriptionIdentifier id) const {
  // Subdirectories are generated by taking the SHA256 hash of the list URL
  // spec, then base64 encoding that hash. This generates paths that are:
  //     - deterministic
  //     - unique
  //     - constant length
  //     - path-safe
  //     - not too long (exactly 45 characters)
  const std::string hash = crypto::SHA256HashString(id.spec());

  std::string pathsafe_id;
  base::Base64UrlEncode(hash, base::Base64UrlEncodePolicy::INCLUDE_PADDING,
                        &pathsafe_id);

  return subscription_path_.AppendASCII(pathsafe_id);
}

void AdBlockSubscriptionServiceManager::CreateSubscription(
    const GURL& list_url) {
  FilterListSubscriptionInfo info;
  info.list_url = list_url;
  info.list_dir = GetSubscriptionPath(list_url);
  info.last_update_attempt = base::Time::Min();
  info.last_successful_update_attempt = base::Time::Min();
  info.enabled = true;

  auto subscription_service = std::make_unique<AdBlockSubscriptionService>(
      info,
      base::BindRepeating(&AdBlockSubscriptionServiceManager::OnListLoaded,
                          weak_ptr_factory_.GetWeakPtr()),
      delegate_);
  UpdateFilterListPrefs(list_url, info);

  // this could allow more than one service for a given url
  subscription_services_.insert(
      std::make_pair(list_url, std::move(subscription_service)));

  // OneShotEvent for StartDownload
  // if (!download_manager_)
  //   return false;

  download_manager_->StartDownload(list_url, true);
}

std::vector<FilterListSubscriptionInfo>
AdBlockSubscriptionServiceManager::GetSubscriptions() const {
  auto infos = std::vector<FilterListSubscriptionInfo>();

  for (const auto& subscription_service : subscription_services_) {
    auto info = GetInfo(subscription_service.first);
    DCHECK(info);
    infos.push_back(*info);
  }

  return infos;
}

void AdBlockSubscriptionServiceManager::EnableSubscription(
    const SubscriptionIdentifier& id,
    bool enabled) {
  auto info = GetInfo(id);
  DCHECK(info);

  info->enabled = enabled;

  UpdateFilterListPrefs(id, *info);
}

void AdBlockSubscriptionServiceManager::DeleteSubscription(
    const SubscriptionIdentifier& id) {
  auto it = subscription_services_.find(id);
  DCHECK(it != subscription_services_.end());
  subscription_services_.erase(it);

  ClearFilterListPrefs(id);

  delegate_->GetTaskRunner()->PostTask(
      FROM_HERE,
      base::BindOnce(base::IgnoreResult(&base::DeletePathRecursively),
                     GetSubscriptionPath(id)));
}

void AdBlockSubscriptionServiceManager::RefreshSubscription(
    const SubscriptionIdentifier& id,
    bool from_ui) {
  auto it = subscription_services_.find(id);
  DCHECK(it != subscription_services_.end());

  auto info = GetInfo(id);
  if (!info)
    return;  // TODO(bridiver) inform of error

  // TODO(bridiver) use OneShotEvent for StartDownload
  // if (!download_manager_)
  //   return; // TODO inform of error

  download_manager_->StartDownload(info->list_url, from_ui);
}

void AdBlockSubscriptionServiceManager::OnGetDownloadManager(
    AdBlockSubscriptionDownloadManager* download_manager) {
  download_manager_ = download_manager;
}

base::Optional<FilterListSubscriptionInfo>
AdBlockSubscriptionServiceManager::GetInfo(
    const SubscriptionIdentifier& id) const {
  PrefService* local_state = delegate_->local_state();
  if (!local_state)
    return base::nullopt;

  const auto* list_subscriptions_dict =
      local_state->GetDictionary(prefs::kAdBlockListSubscriptions);
  if (!list_subscriptions_dict || list_subscriptions_dict->empty())
    return base::nullopt;

  auto info = base::make_optional<FilterListSubscriptionInfo>();

  auto* list_subscription_dict = list_subscriptions_dict->FindKey(id.spec());
  if (!list_subscription_dict)
    return base::nullopt;

  return base::make_optional<FilterListSubscriptionInfo>(
      BuildInfoFromDict(id, list_subscription_dict));
}

void AdBlockSubscriptionServiceManager::LoadSubscriptionServices() {
  PrefService* local_state = delegate_->local_state();
  if (!local_state)
    return;

  const base::DictionaryValue* list_subscriptions_dict =
      local_state->GetDictionary(prefs::kAdBlockListSubscriptions);
  if (!list_subscriptions_dict || list_subscriptions_dict->empty()) {
    return;
  }

  for (base::DictionaryValue::Iterator it(*list_subscriptions_dict);
       !it.IsAtEnd(); it.Advance()) {
    const std::string uuid = it.key();
    FilterListSubscriptionInfo info;
    const base::Value* list_subscription_dict =
        list_subscriptions_dict->FindDictKey(uuid);
    if (list_subscription_dict) {
      const GURL list_url = GURL(uuid);

      info = BuildInfoFromDict(list_url, list_subscription_dict);

      auto subscription_service = std::make_unique<AdBlockSubscriptionService>(
          info,
          base::BindRepeating(&AdBlockSubscriptionServiceManager::OnListLoaded,
                              weak_ptr_factory_.GetWeakPtr()),
          delegate_);

      subscription_services_.insert(
          std::make_pair(uuid, std::move(subscription_service)));
    }
  }
}

// Updates preferences to reflect a new state for the specified filter list.
// Creates the entry if it does not yet exist.
void AdBlockSubscriptionServiceManager::UpdateFilterListPrefs(
    const SubscriptionIdentifier& id,
    const FilterListSubscriptionInfo& info) {
  PrefService* local_state = delegate_->local_state();
  if (!local_state) {
    return;
  }

  // TODO(bridiver) - update for Time
  //   base::Value TimeToValue(base::Time time);
  // base::Optional<base::Time> util::ValueToTime(const base::Value* value);
  // base::Optional<base::Time> util::ValueToTime(const base::Value& value);

  DictionaryPrefUpdate update(local_state, prefs::kAdBlockListSubscriptions);
  base::DictionaryValue* subscriptions_dict = update.Get();
  auto subscription_dict = base::Value(base::Value::Type::DICTIONARY);
  subscription_dict.SetBoolKey("enabled", info.enabled);
  subscription_dict.SetDoubleKey("last_update_attempt",
                                 info.last_update_attempt.ToJsTime());
  subscription_dict.SetDoubleKey(
      "last_successful_update_attempt",
      info.last_successful_update_attempt.ToJsTime());
  subscriptions_dict->SetKey(id.spec(), std::move(subscription_dict));
}

// Updates preferences to remove all state for the specified filter list.
void AdBlockSubscriptionServiceManager::ClearFilterListPrefs(
    const SubscriptionIdentifier& id) {
  PrefService* local_state = delegate_->local_state();
  if (!local_state) {
    return;
  }
  DictionaryPrefUpdate update(local_state, prefs::kAdBlockListSubscriptions);
  base::DictionaryValue* subscriptions_dict = update.Get();
  subscriptions_dict->RemoveKey(id.spec());
}

bool AdBlockSubscriptionServiceManager::Start() {
  for (const auto& subscription_service : subscription_services_) {
    subscription_service.second->Start();
  }
  return true;
}

void AdBlockSubscriptionServiceManager::ShouldStartRequest(
    const GURL& url,
    blink::mojom::ResourceType resource_type,
    const std::string& tab_host,
    bool* did_match_rule,
    bool* did_match_exception,
    bool* did_match_important,
    std::string* mock_data_url) {
  for (const auto& subscription_service : subscription_services_) {
    auto info = GetInfo(url);
    if (info && info->enabled) {
      subscription_service.second->ShouldStartRequest(
          url, resource_type, tab_host, did_match_rule, did_match_exception,
          did_match_important, mock_data_url);
      if (did_match_important && *did_match_important) {
        return;
      }
    }
  }
}

void AdBlockSubscriptionServiceManager::EnableTag(const std::string& tag,
                                                  bool enabled) {
  for (const auto& subscription_service : subscription_services_) {
    subscription_service.second->EnableTag(tag, enabled);
  }
}

void AdBlockSubscriptionServiceManager::AddResources(
    const std::string& resources) {
  for (const auto& subscription_service : subscription_services_) {
    subscription_service.second->AddResources(resources);
  }
}

base::Optional<base::Value>
AdBlockSubscriptionServiceManager::UrlCosmeticResources(
    const std::string& url) {
  base::Optional<base::Value> first_value = base::nullopt;

  for (auto it = subscription_services_.begin();
       it != subscription_services_.end(); it++) {
    auto info = GetInfo(it->first);
    if (info && info->enabled) {
      base::Optional<base::Value> next_value =
          it->second->UrlCosmeticResources(url);
      if (first_value) {
        if (next_value) {
          MergeResourcesInto(std::move(*next_value), &*first_value, false);
        }
      } else {
        first_value = std::move(next_value);
      }
    }
  }

  return first_value;
}

base::Optional<base::Value>
AdBlockSubscriptionServiceManager::HiddenClassIdSelectors(
    const std::vector<std::string>& classes,
    const std::vector<std::string>& ids,
    const std::vector<std::string>& exceptions) {
  base::Optional<base::Value> first_value = base::nullopt;

  for (auto it = subscription_services_.begin();
       it != subscription_services_.end(); it++) {
    auto info = GetInfo(it->first);
    if (info && info->enabled) {
      base::Optional<base::Value> next_value =
          it->second->HiddenClassIdSelectors(classes, ids, exceptions);
      if (first_value && first_value->is_list()) {
        if (next_value && next_value->is_list()) {
          for (auto i = next_value->GetList().begin();
               i < next_value->GetList().end(); i++) {
            first_value->Append(std::move(*i));
          }
        }
      } else {
        first_value = std::move(next_value);
      }
    }
  }

  return first_value;
}

void AdBlockSubscriptionServiceManager::OnListDownloaded(
    const SubscriptionIdentifier& id) {
  auto it = subscription_services_.find(id);
  if (it == subscription_services_.end())
    return;

  it->second->OnSuccessfulDownload();
}

void AdBlockSubscriptionServiceManager::OnListLoaded(
    const SubscriptionIdentifier& id) {
  auto it = subscription_services_.find(id);
  if (it == subscription_services_.end())
    return;

  auto info = GetInfo(id);
  if (!info)
    return;

  info->last_update_attempt = base::Time::Now();
  info->last_successful_update_attempt = base::Time::Now();
  UpdateFilterListPrefs(id, *info);

  // calling this more than once is ok
  it->second->Start();
  NotifyObserversOfServiceEvent();
}

void AdBlockSubscriptionServiceManager::OnListDownloadFailure(
    const SubscriptionIdentifier& id) {
  auto info = GetInfo(id);
  if (!info)
    return;

  info->last_update_attempt = base::Time::Now();
  UpdateFilterListPrefs(id, *info);
}

void AdBlockSubscriptionServiceManager::NotifyObserversOfServiceEvent() {
  for (auto& observer : observers_) {
    observer.OnServiceUpdateEvent();
  }
}

void AdBlockSubscriptionServiceManager::AddObserver(
    AdBlockSubscriptionServiceManagerObserver* observer) {
  observers_.AddObserver(observer);
}

void AdBlockSubscriptionServiceManager::RemoveObserver(
    AdBlockSubscriptionServiceManagerObserver* observer) {
  observers_.RemoveObserver(observer);
}

}  // namespace brave_shields
